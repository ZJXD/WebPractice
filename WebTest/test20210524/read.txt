/*
 * @Author: ZHT 
 * @Date: 2021-05-24 13:19:09 
 * @Last Modified by: ZHT
 * @Last Modified time: 2021-06-16 15:52:29
 */
 
本文件是一个面试题记录的
来源：https://mp.weixin.qq.com/s/K9DOu0w41caS0SbVVA-cBg

Vue 问题
1、Vue 源码
2、Vue 组件化，需要用到哪些技术点，以及如何开发
3、Vue2 和 Vue3 的区别
4、为什么 Vue3 用了 Proxy 性能更好？
5、Proxy 的缺点是什么，为什么比 Object.defineProperty 快？
6、Vue2 的 Object.defineProperty 是一种什么机制？
7、Proxy 和 defineProperty 区别
8、Vue3 的按需引入是如何做到的，为什么 Vue2 没有用？
9、Vue 的性能优化
10、Vue 中的插槽机制，如何使用？
11、插槽有哪些 API？插槽的作用域
12、具名插槽如何使用？
13、自定义组件怎么实现双向绑定
14、父子组件通信，除了 emit、eventbus 还有哪些
15、vue 组件的双向绑定 sync 
16、Vue 组件的响应式，对数组做了哪些额外处理？
17、Vue 的虚拟 DOM 和 diff 算法，并从创建和更新角度说下
18、diff 用了什么算法
19、vue 路由：hash 和 history url 输入到渲染过程区别
20、vue 渲染函数 render 使用
21、自定义指令（directive）及生命周期
    可以参加“腾讯文档——Vue——六Vue小知识点”
22、sync 修饰符
    sync 是一个语法糖，用户对绑定的数据，添加 v-on 监听（子组件可更新）
23、MVVM 特点、和 MVC 区别
  参考：MVVM 有点和区别（https://www.cnblogs.com/lishuge/articles/12332896.html）
       MVC、MVP、MVVM 区别（https://www.jianshu.com/p/ff6de219f988）
  什么是 MVVM
    1、微软最早提出，借鉴了桌面应用程序 MVC 的思想
    2、Model 用纯 JS 对象表示，View 负责显示，两者做了最大限度的分离，ViewModel 把两者关联起来
    3、ViewModel 负责把 Model 的数据同步到 View 显示，还负责把 View 的修改同步回 Model
    4、Model 和 View 之间的同步工作都是自动的，无需人为干涉
    5、开发者只需关系业务逻辑，不需要手动操作 DOM，不需要关注数据状态的同步
  MVVM 特点
    1、低耦合：Model 和 View 完全独立，各自做好自己的事情
    2、数据自动同步：ViewModel 通过数据双向绑定，实现 Model 和 View 间自动同步
    3、可复用性：把一些视图逻辑放在同一个 ViewModel 里，让多个 View 复用这个逻辑
    4、独立开发：开发人员专注于业务逻辑和数据，设计人员专注于 UI
    5、可测试：因为是相对独立的，没有强依赖，可以单独单元测试
  MVVM 和 MVC 区别
    1、MVC 中的 Controller 变成 ViewModel
    2、MVVM 是数据驱动的，不需要显示操作 DOM
    3、MVC 中的 Model 和 View 是可以直接打交道，耦合度底
    4、MVVM 主要解决了：MVC 中大量的 DOM 操作，页面渲染能力低、加载速度慢
24、keep-alive 生命周期的改变
    主要就是：activated 和 deactivated ，当 keep-alive 内的组件切换，这两个生命周期函数钩子都会被执行，2.2.0 以后所有包含的组件都会执行这个两个
25、单页应用（SPA）优缺点
  参考：单页应用优缺点（https://blog.csdn.net/weixin_26752759/article/details/108085537）
        优缺点（https://www.cnblogs.com/belongs-to-qinghua/p/11151054.html）
  优点：
    1、更快的响应
      单页应用不需要更新整改页面，只是更改局部（配合组件、路由）可以显著提高网站速度。在应用程序的整个生命周期，大多数资源只加载一次。仅是数据的来回传输。
    2、更好的缓存
      单页应用可以有效的缓存任何本地数据
    3、简单、线性用户体验
      这些 web 应用包含清晰的 开头、中间、结尾，使用 SPA 滚动方便且不间断
    4、相对对服务器压力下
    5、良好的前后端分离
  缺点：
    1、较差的 SEO
      SPA 主要运行在 JS 上，所以对于爬虫并不友好，在请求页面并不能及时或者第一时间获取到文档内容
    2、缺乏浏览器历史记录
      导航不可用，需要直接手动实现
    3、更多安全问题
    4、初次加载耗时跟多
      对应解决：按需加载、缓存+懒加载
26、computed 和 watch 差异和实现原理
  参考：原理（https://www.cnblogs.com/everlose/p/12542011.html）
    1、都可以监听数据变化并作出计算、操作等
    2、watch 是监听指定的某一个（观察，类似回调）
    3、comouted 可以依赖多个计算（依赖）
    4、computed 有缓存（再次获取，如果依赖的没有改变就使用缓存）
    5、
27、Vue-cli 基本原理
28、


JS 问题
1、数组有哪些 API 改变原数组
    这 9 个改变原数组：pop、push、shift、unshift、reverse、sort、splice、copyWithin、fill
2、说下解构
    参考 阮一峰的“变量的解构赋值（https://es6.ruanyifeng.com/?search=import&x=0&y=0#docs/destructuring）”
    定义：ES6 允许按照一定模式，从数组和对象中提前值，对变量进行赋值，这被称为解构。
    1、一定的模式，就是左右数据类型、结构一致，相同位置进行解构赋值（左侧数组，右侧也必须是数组，左侧对象右侧必须对象）
    2、只要某种数据结构具有 Iteraor 接口，就可以采用数组形式解构
    3、完全解构、部分解构、解构失败
    4、默认值，左侧接收的参数 [a=1]（这里就设置了默认值1），解构不成功会使用这个默认值
    5、数组解构是根据对应位置，对象解构是根据属性名称（位置可以不一致）
    6、对象解构，可以设置解构后的名称 {foo:f} = {foo:'123} f 赋值为 123
    7、解构都可以进行多级、混合
3、说下剩余参数，是如何使用的
    剩余参数：当有不确定参数时，可以用一个数组进行接收，这些就是剩余参数
    1、剩余参数是数组，具有数组的所有属性方法
    2、arguments 是一个伪数组
4、解构时，给一个变量赋默认值
5、Promise 使用
6、如何把一个请求封装为 Promise 方式
    可查看：本项目下 JSAPI——Promise 和 “腾讯文档——Promise”
7、then 可以接收什么回调，包括失败回调吗？
8、原型和原型链
9、ES6 新增了哪些新特性？常用的哪些
10、箭头函数和普通函数区别
11、JS 引擎，除了 V8 还有哪些
    1、参考“从JS引擎到JS运行时（https://zhuanlan.zhihu.com/p/104333176?utm_source=weibo）”
12、var、let、const 声明的变量在全局的挂载问题
    1、var 在全局声明会挂载到 window
    2、let、const 在全局声明不会挂载到 window，是 script（这个是什么？待深入）
    3、
13、垃圾回收机制
    1、垃圾回收考虑的几个点
    2、几种算法：标记清除，标记压缩，引用计数，GC复制算法
14、解构和扩展运算符（...）
15、


浏览器：
0、http 的缓存
1、强制缓存是对比 header 的哪个属性？
2、什么是协商缓存？协商缓存在什么时候读取？
3、有没有了解资源的缓存策略？html、js、css 是怎么设置的？
4、XMLHTTPRequest 请求头什么实现跨域
5、Connection: keep-alive
    HTTP1.1 以后，这个请求头字段是，建立长连接
6、


TS 问题
1、TS 中的泛型，以及使用场景
2、如果接口返回 promise 类型数据，如何用 TS 声明
3、如何使用 TS 的联合类型
4、TS 中的内置类型
5、TS 中的 pick 类型
6、在 TS 中如何定义一个对象类型
7、TS 中 type 和 interface 区别
8、TS 中的交叉类型


CSS 问题
1、


数据结构
1、有哪些数据结构，其特点
2、如何从链表中查找数据
3、如何向堆中插入数据
4、如何向二叉树中插入节点
5、深度优先搜索和广度优先搜索


优化问题
1、SEO
2、app 首屏优化、缓存等
