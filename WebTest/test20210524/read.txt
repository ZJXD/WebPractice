/*
 * @Author: ZHT 
 * @Date: 2021-05-24 13:19:09 
 * @Last Modified by: ZHT
 * @Last Modified time: 2021-05-27 10:03:43
 */
 
本文件是一个面试题记录的
来源：https://mp.weixin.qq.com/s/K9DOu0w41caS0SbVVA-cBg

Vue 问题
1、Vue 源码
2、Vue 组件化，需要用到哪些技术点，以及如何开发
3、Vue2 和 Vue3 的区别
4、为什么 Vue3 用了 Proxy 性能更好？
5、Proxy 的缺点是什么，为什么比 Object.defineProperty 快？
6、Vue2 的 Object.defineProperty 是一种什么机制？
7、Proxy 和 defineProperty 区别
8、Vue3 的按需引入是如何做到的，为什么 Vue2 没有用？
9、Vue 的性能优化
10、Vue 中的插槽机制，如何使用？
11、插槽有哪些 API？插槽的作用域
12、具名插槽如何使用？
13、自定义组件怎么实现双向绑定
14、父子组件通信，除了 emit、eventbus 还有哪些
15、vue 组件的双向绑定 sync 
16、Vue 组件的响应式，对数组做了哪些额外处理？
17、Vue 的虚拟 DOM 和 diff 算法，并从创建和更新角度说下
18、diff 用了什么算法
19、vue 路由：hash 和 history url 输入到渲染过程区别


JS 问题
1、数组有哪些 API 改变原数组
    这 9 个改变原数组：pop、push、shift、unshift、reverse、sort、splice、copyWithin、fill
2、说下解构
    参考 阮一峰的“变量的解构赋值（https://es6.ruanyifeng.com/?search=import&x=0&y=0#docs/destructuring）”
    定义：ES6 允许按照一定模式，从数组和对象中提前值，对变量进行赋值，这被称为解构。
    1、一定的模式，就是左右数据类型、结构一致，相同位置进行解构赋值（左侧数组，右侧也必须是数组，左侧对象右侧必须对象）
    2、只要某种数据结构具有 Iteraor 接口，就可以采用数组形式解构
    3、完全解构、部分解构、解构失败
    4、默认值，左侧接收的参数 [a=1]（这里就设置了默认值1），解构不成功会使用这个默认值
    5、数组解构是根据对应位置，对象解构是根据属性名称（位置可以不一致）
    6、对象解构，可以设置解构后的名称 {foo:f} = {foo:'123} f 赋值为 123
    7、解构都可以进行多级、混合
3、说下剩余参数，是如何使用的
    剩余参数：当有不确定参数时，可以用一个数组进行接收，这些就是剩余参数
    1、剩余参数是数组，具有数组的所有属性方法
    2、arguments 是一个伪数组
4、解构时，给一个变量赋默认值
5、Promise 使用
6、如何把一个请求封装为 Promise 方式
7、then 可以接收什么回调，包括失败回调吗？
8、原型和原型链
9、ES6 新增了哪些新特性？常用的哪些
10、箭头函数和普通函数区别
11、JS 引擎，除了 V8 还有哪些
    1、参考“从JS引擎到JS运行时（https://zhuanlan.zhihu.com/p/104333176?utm_source=weibo）”
12、var、let、const 声明的变量在全局的挂载问题
    1、var 在全局声明会挂载到 window
    2、let、const 在全局声明不会挂载到 window，是 script（这个是什么？待深入）
    3、
13、垃圾回收机制
    1、垃圾回收考虑的几个点
    2、几种算法：标记清除，标记压缩，引用计数，GC复制算法
14、


浏览器：
0、http 的缓存
1、强制缓存是对比 header 的哪个属性？
2、什么是协商缓存？协商缓存在什么时候读取？
3、有没有了解资源的缓存策略？html、js、css 是怎么设置的？
4、


TS 问题
1、TS 中的泛型，以及使用场景
2、如果接口返回 promise 类型数据，如何用 TS 声明
3、如何使用 TS 的联合类型
4、TS 中的内置类型
5、TS 中的 pick 类型
6、在 TS 中如何定义一个对象类型
7、TS 中 type 和 interface 区别
8、TS 中的交叉类型


CSS 问题
1、


数据结构
1、有哪些数据结构，其特点
2、如何从链表中查找数据
3、如何向堆中插入数据
4、如何向二叉树中插入节点
5、深度优先搜索和广度优先搜索
